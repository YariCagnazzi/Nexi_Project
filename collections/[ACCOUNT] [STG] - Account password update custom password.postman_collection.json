{
  "info": {
    "_postman_id": "1b65db4a-26c5-48d4-88be-932f0e3329db",
    "name": "[ACCOUNT]Â [STG] - Account password update custom password",
    "description": "Works on STG environment\n\nThis collection is needed to update account password.\n\nPassword could be custom or rnd generated if INPUT_password field is empty or not present.\n\nThis collection depends on a number of INPUT fields:\n\n- INPUT_uidList: a list of UIDs (aka email list) comma or newline separated (mandatory)\n- INPUT_type: a value as a string (mandatory)\n    - valid values are: PORTALE_TITOLARI, PORTALE_SELFPOINTONLINE_DB,PORTALE_YAP,PORTALE_AZIENDE,PORTALE_IBK_NOMEBANCA,PORTALE_SISERVIZI,PORTALE_MAGENTO,PORTALE_PLATEA,PORTALE_MPOS\n- INPUT_passwordLength: a value as a integer greater than 0 (not mandatory)\n- INPUT_password: your password (not mandatory)\n    \n\nNote: if INPUT_password is empty, then INPUT_passwordLength must be a valid integer greate than 0. If INPUT_password is not empty, then INPUT_passwordLength is ignored.\n\nUsage:\n\n- Reset collection variables;\n- Set \"INPUT_\" prefixed parameters as your needs;\n- Run the collection.\n    \n\nThis collection depends on some other JS scripts needed to validate the correctness of FC and PAN:\n\n- FUN_extractEmails\n- FUN_generatePassword\n    \n\nThis collection produces output in JSON format, stored in the collection variable RESULT.\n\nE.g.:\n\n``` json\n[\n  {\n    \"accountId\": {\n      \"returnCode\": {\n        \"code\": null,\n        \"message\": null\n      },\n      \"account_id\": 16410076,\n      \"uid\": \"stg_pt.excel.mc03@yopmail.com\",\n      \"active\": true,\n      \"user_codicefiscale\": \"MNOBNC31C41H501Y\",\n      \"user_userid\": \"68736\"\n    },\n    \"password\": \"[LDAP: error code 65 - Entry nexiAccountUid=16410076,ou=portale_titolari,ou=ACCOUNTS,ou=issuing,dc=iam,dc=nexi,dc=it cannot not be modified because the resulting entry would have violated the server schema:  Entry nexiAccountUid=16410076,ou=portale_titolari,ou=ACCOUNTS,ou=issuing,dc=iam,dc=nexi,dc=it violates the Directory Server schema configuration because it includes multiple values for attribute nexiAccountPortaleTitolariSsoCBFirstLogin, which is defined as a single-valued attribute]; nested exception is javax.naming.directory.SchemaViolationException: [LDAP: error code 65 - Entry nexiAccountUid=16410076,ou=portale_titolari,ou=ACCOUNTS,ou=issuing,dc=iam,dc=nexi,dc=it cannot not be modified because the resulting entry would have violated the server schema:  Entry nexiAccountUid=16410076,ou=portale_titolari,ou=ACCOUNTS,ou=issuing,dc=iam,dc=nexi,dc=it violates the Directory Server schema configuration because it includes multiple values for attribute nexiAccountPortaleTitolariSsoCBFirstLogin, which is defined as a single-valued attribute]; remaining name 'nexiAccountUid=16410076,ou=portale_titolari,ou=ACCOUNTS,ou=issuing'\"\n  },\n  {\n    \"accountId\": {\n      \"returnCode\": {\n        \"code\": null,\n        \"message\": null\n      },\n      \"account_id\": 16410076,\n      \"uid\": \"stg_pt.excel.mc03@yopmail.com\",\n      \"active\": true,\n      \"user_codicefiscale\": \"MNOBNC31C41H501Y\",\n      \"user_userid\": \"68736\"\n    },\n    \"password\": \"54p$TCpF$p!=\"\n  }\n]\n\n ```",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "18258051",
    "_collection_link": "https://team-nexi-alten.postman.co/workspace/Rockman_player~d1db713b-f91b-41cf-8eef-7af1d78fa8bb/collection/18258051-1b65db4a-26c5-48d4-88be-932f0e3329db?action=share&creator=18258051&source=collection_link"
  },
  "item": [
    {
      "name": "0 - Set JWT Token",
      "item": [
        {
          "name": "Generate JWT",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Use arrow functions for test functions",
                  "pm.test(\"Successful POST request\", () => {",
                  "    // Use array includes method for multiple code validation",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202])",
                  "})",
                  "",
                  "// Use destructuring to extract 'access_token' from the response",
                  "const { access_token } = JSON.parse(responseBody)",
                  "",
                  "pm.test(\"Response should contain 'access_token'\", () => {",
                  "    // Use response object directly instead of responseBody",
                  "    pm.expect(access_token).to.exist",
                  "})",
                  "",
                  "// Use pm.variables instead of pm.collectionVariables",
                  "pm.collectionVariables.set(\"jwtToken\", access_token)",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "//console.clear()",
                  "console.log(\"Set JWT\")"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                },
                {
                  "key": "client_id",
                  "value": "{{titolariClientId}}",
                  "type": "text"
                },
                {
                  "key": "client_secret",
                  "value": "{{titolariClientSecret}}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{jwtTokenServer}}/oauth/v2/token",
              "host": [
                "{{jwtTokenServer}}"
              ],
              "path": [
                "oauth",
                "v2",
                "token"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "6 - preset",
      "item": [
        {
          "name": "Parse uids",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const list = pm.collectionVariables.get(\"INPUT_uidList\")",
                  "const emailList = list.match(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9_-]+)/gi) || []",
                  "",
                  "console.info(`Found ${emailList.length} emails`)",
                  "pm.collectionVariables.set(\"uidList\", JSON.stringify(emailList))"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://www.google.it/",
              "protocol": "http",
              "host": [
                "www",
                "google",
                "it"
              ],
              "path": [
                ""
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "10 - Start loop through UID list",
      "item": [
        {
          "name": "Start loop",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const list = JSON.parse(pm.collectionVariables.get(\"uidList\"))",
                  "",
                  "const uid = list.shift()",
                  "pm.collectionVariables.set(\"uid\", uid)",
                  "pm.collectionVariables.set(\"uidList\", JSON.stringify(list))",
                  "",
                  "console.info(`Processing uid: ${pm.collectionVariables.get(\"uid\")}`)"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://www.google.it",
              "protocol": "http",
              "host": [
                "www",
                "google",
                "it"
              ]
            },
            "description": "Lets subscribe card to one or more services."
          },
          "response": [
            {
              "name": "Success",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "description": "(Required) technical code of the application calling the service.",
                    "key": "MT_APPLICATION",
                    "value": "{{MT_APPLICATION}}"
                  },
                  {
                    "description": "(Required) channel code of the request - [WEB, MOB, BAT] ",
                    "key": "MT_CHANNEL",
                    "value": "{{MT_CHANNEL}}"
                  },
                  {
                    "description": "(Required) user identifier of the request (username , userid , ...)",
                    "key": "MT_USER",
                    "value": "{{MT_USER}}"
                  },
                  {
                    "description": "(Required) Company Group identification code.",
                    "key": "MT_COMPANY_GROUP",
                    "value": "{{MT_COMPANY_GROUP}}"
                  },
                  {
                    "description": "(Required) Company code.",
                    "key": "MT_COMPANY",
                    "value": "{{MT_COMPANY}}"
                  },
                  {
                    "description": "(Required) Partner belonging to the company. It describe a subset of NEXI customer related to the specified partner.",
                    "key": "MT_PARTNER",
                    "value": "{{MT_PARTNER}}"
                  },
                  {
                    "description": "(Required) Random unique identification code of the request set by the client. Example UUID [8119c0ce-17f2-11e8-accf-0ed5f89f718b]",
                    "key": "MT_REQUEST_ID",
                    "value": "{{MT_REQUEST_ID}}"
                  },
                  {
                    "description": "(Required) Random unique identification code identifying a single session of the client. Example JSESSIONID [b272023f-05ca-44cb-96cd-6d72c72d03f9]",
                    "key": "MT_SESSION_ID",
                    "value": "{{MT_SESSION_ID}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"cardId\": {\n        \"type\": \"PAN\",\n        \"value\": 4532200085801459\n    },\n    \"skipCustomerCertifiedData\": false\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/issuing/cards/v1/getCard",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "issuing",
                    "cards",
                    "v1",
                    "getCard"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [],
              "cookie": [],
              "body": "{\n    \"result\": {\n        \"code\": \"0\",\n        \"description\": \"OK\"\n    },\n    \"card\": {\n        \"card\": {\n            \"cardId\": {\n                \"value\": \"4532200085801459\",\n                \"type\": \"PAN\",\n                \"processor\": \"S\",\n                \"bin\": \"453220\",\n                \"tail\": \"1459\"\n            },\n            \"productKey\": {\n                \"abi\": \"03395\",\n                \"affinity\": \"40\",\n                \"plastic\": \"00\",\n                \"productType\": \"CRE\",\n                \"circuitCode\": \"V\"\n            },\n            \"bankName\": \"BANCA INTERPROVINCIALE\",\n            \"productId\": \"033954000VC\",\n            \"productCode\": \"4000\",\n            \"productDescription\": \"BUSINESS CARTA BUSINESS\",\n            \"prepaidVendor\": null,\n            \"circuitDetail\": \"VISA\",\n            \"emissionTypeCode\": \"NU\",\n            \"emissionTypeDescription\": \"NUOVA\",\n            \"offlineBlockDate\": null,\n            \"offlineBlockType\": null,\n            \"offlineBlockDescription\": null,\n            \"validityStartDate\": \"2018-12-21\",\n            \"expiringDate\": \"2026-03-31\",\n            \"validityState\": \"V\",\n            \"expenseLimit\": {\n                \"value\": 10000,\n                \"currency\": \"EUR\"\n            },\n            \"expenseLimit2ndLine\": null,\n            \"expenseLimit3ndLine\": null,\n            \"ibanDebit\": null,\n            \"downOptionMonthlyLimit\": {\n                \"value\": 0,\n                \"currency\": \"EUR\"\n            },\n            \"downOptionDailyLimit\": {\n                \"value\": 0,\n                \"currency\": \"EUR\"\n            },\n            \"velocitySpendingMonthlyLimit\": {\n                \"value\": 0,\n                \"currency\": \"EUR\"\n            },\n            \"velocitySpendingDailyLimit\": {\n                \"value\": 0,\n                \"currency\": \"EUR\"\n            },\n            \"flagBancomat\": \"N\",\n            \"flagChip\": \"S\",\n            \"flagContactless\": \"S\",\n            \"flagDebit\": \"N\",\n            \"flagFamiliar\": \"N\",\n            \"flagHCE\": \"N\",\n            \"flagIndividualBilling\": \"N\",\n            \"flagDirectIssuing\": \"N\",\n            \"flagMultifunction\": \"N\",\n            \"flagNFC\": \"N\",\n            \"flagPrepaid\": \"N\",\n            \"flagPrepaidNameless\": \"N\",\n            \"flagPrepaidVirtual\": \"N\",\n            \"paymentType\": \"S\",\n            \"cardIdHCE\": null,\n            \"cardIncremental\": \"1\",\n            \"anagraphicIncremental\": \"1\",\n            \"distributorBank\": null,\n            \"flagActivationRequired\": \"N\",\n            \"prepaidRechargeIBAN\": null,\n            \"contractType\": \"C\",\n            \"equensAccountId\": null,\n            \"cardRelationType\": null,\n            \"flagAnonymous\": \"N\",\n            \"tags\": [],\n            \"renewalPresent\": \"N\",\n            \"renewalShipped\": \"N\"\n        },\n        \"customerData\": {\n            \"name\": \"BRAMBILLA\",\n            \"surname\": \"ABIBO\",\n            \"heading\": \"ABIBO BRAMBILLA\",\n            \"fiscalCode\": \"BRMBBA85S01F205R\",\n            \"flagPositionOwner\": \"S\",\n            \"sex\": \"M\",\n            \"birthDate\": \"1985-11-01\",\n            \"birthPlace\": \"MILANO\",\n            \"birthCity\": \"MI\",\n            \"birthNation\": \"ITALIA\",\n            \"cardSubjectId\": \"117975817\"\n        },\n        \"position\": {\n            \"typeCode\": \"1\",\n            \"typeDescription\": \"I\",\n            \"positionId\": \"9000008\",\n            \"positionAbi\": \"03395\",\n            \"positionKeySION\": \"033959000008\",\n            \"offlineBlockDate\": null,\n            \"offlineBlockType\": null,\n            \"validityState\": \"V\",\n            \"conditionTypeCode\": \"0\",\n            \"conditionTypeDescription\": \"ORDINARIO\",\n            \"flagExtendendCredit\": \"N\",\n            \"iban\": \"IT11E0339512900123456789012\",\n            \"bankAccountId\": \"123456789012\",\n            \"bankAccountType\": \"CO\",\n            \"sourceSubsystem\": \"C\",\n            \"homeAddressPostalCode\": \"20145\",\n            \"homeAddressStreet\": \"GIARDINI GUASTALLA 8\",\n            \"homeAddressCountryCode\": null,\n            \"homeAddressCity\": \"MILANO\",\n            \"homeAddressAdministrativeArea\": \"MI\",\n            \"accountholderName\": \"ABIBO BRAMBILLA\",\n            \"vatNumber\": null,\n            \"positionSubjectId\": \"117975817\",\n            \"agencyCode\": \"00001\"\n        }\n    }\n}"
            },
            {
              "name": "Template response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "description": "(Required) technical code of the application calling the service.",
                    "key": "MT_APPLICATION",
                    "value": "minim dolore"
                  },
                  {
                    "description": "(Required) channel code of the request - [WEB, MOB, BAT] ",
                    "key": "MT_CHANNEL",
                    "value": "minim dolore"
                  },
                  {
                    "description": "(Required) user identifier of the request (username , userid , ...)",
                    "key": "MT_USER",
                    "value": "minim dolore"
                  },
                  {
                    "description": "(Required) Company Group identification code.",
                    "key": "MT_COMPANY_GROUP",
                    "value": "minim dolore"
                  },
                  {
                    "description": "(Required) Company code.",
                    "key": "MT_COMPANY",
                    "value": "minim dolore"
                  },
                  {
                    "description": "(Required) Partner belonging to the company. It describe a subset of NEXI customer related to the specified partner.",
                    "key": "MT_PARTNER",
                    "value": "minim dolore"
                  },
                  {
                    "description": "(Required) Random unique identification code of the request set by the client. Example UUID [8119c0ce-17f2-11e8-accf-0ed5f89f718b]",
                    "key": "MT_REQUEST_ID",
                    "value": "minim dolore"
                  },
                  {
                    "description": "(Required) Random unique identification code identifying a single session of the client. Example JSESSIONID [b272023f-05ca-44cb-96cd-6d72c72d03f9]",
                    "key": "MT_SESSION_ID",
                    "value": "minim dolore"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"cardId\": {\n        \"bin\": \"eu\",\n        \"processor\": \"S\",\n        \"tail\": \"irure velit nisi consectetur\",\n        \"type\": \"PAN\",\n        \"value\": \"proident dolor do m\"\n    },\n    \"mobilePhone\": {\n        \"mobilePhoneNumber\": \"laborum\",\n        \"carrier\": \"qui fugiat minim labore\",\n        \"countryAlphaTwoCode\": \"IT\",\n        \"mobilePhonePrefix\": \"+39\"\n    },\n    \"updateSystems\": [\n        \"SMS\",\n        \"SMS\"\n    ],\n    \"acs\": {\n        \"issuerCode\": \"fugiat nulla\",\n        \"notificationChannel3DSecure\": \"EMAIL\",\n        \"abi\": \"aliqua anim\",\n        \"channel\": \"Duis\",\n        \"fiscalCode\": \"sclrcs95e15l407h\",\n        \"identifyingPhrase3DSecure\": \"et sint dolor Ut\",\n        \"ownerName\": \"minim id labore\",\n        \"templateId\": \"inc\",\n        \"templateSMS\": \"ad labore\",\n        \"unlockRequest\": \"culpa\"\n    },\n    \"customerData\": {\n        \"birthCity\": \"MI\",\n        \"birthDate\": \"2000-10-02\",\n        \"birthNation\": \"Italy\",\n        \"birthPlace\": \"Sesto San Giovanni\",\n        \"fiscalCode\": \"RSSMRA81M18D121R\",\n        \"flagPositionOwner\": \"S\",\n        \"heading\": \"Mario Rossi\",\n        \"name\": \"Mario\",\n        \"sex\": \"M\",\n        \"surname\": \"Rossi\"\n    },\n    \"disablePropagation\": false,\n    \"sms\": {\n        \"alertThreshold\": {\n            \"currency\": \"EUR\",\n            \"value\": 23.78\n        },\n        \"flagAlertThreshold\": \"cillum sunt velit laboris\",\n        \"availabilityThreshold\": {\n            \"currency\": \"EUR\",\n            \"value\": 23.78\n        },\n        \"flagAvailabilityBS\": \"sit\",\n        \"flagAvailabilityPull\": \"et nisi aliquip reprehenderit\",\n        \"flagAvailabilityThreshold\": \"velit Lorem cupidatat tempor dolore\",\n        \"flagCharity\": \"in quis adipisicing ani\",\n        \"flagPayment\": \"amet pariatur\",\n        \"flagWelcome\": \"esse amet cillum exercitation\",\n        \"profileType\": \"ipsum nulla reprehenderit\",\n        \"sourceCode\": \"labore ad\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/subscribe",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "subscribe"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n \"result\": {\n  \"code\": \"dolore ex incididunt in\",\n  \"description\": \"success\",\n  \"infos\": [\n   {\n    \"code\": \"laborum qui esse eiusmod dolore\",\n    \"description\": \"success\",\n    \"source\": \"ipsum ut\"\n   },\n   {\n    \"code\": \"pariatur\",\n    \"description\": \"success\",\n    \"source\": \"dolore elit nulla\"\n   }\n  ]\n }\n}"
            }
          ]
        },
        {
          "name": "Reset variables",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "console.info('Reset environment variables')",
                  "",
                  "const resetAll = (value, ...args) => {",
                  "    args.forEach(arg => {",
                  "        pm.collectionVariables.set(arg, value)",
                  "    })",
                  "}",
                  "",
                  "resetAll(",
                  "    \"account_id\",",
                  "    \"getAccountDetails\",",
                  "    \"password\"",
                  "    )"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://www.google.it",
              "protocol": "http",
              "host": [
                "www",
                "google",
                "it"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "20 - Get Account ID",
      "item": [
        {
          "name": "Get Account ID",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "",
                  "pm.test(\"Successful POST request\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202])",
                  "})",
                  "",
                  "const uid = pm.collectionVariables.get(\"uid\")",
                  "console.info(`Search for uid \"${uid}\" details`)",
                  "const response = pm.response.json()",
                  "",
                  "const account_id = response?.account_id ?? null",
                  "const active = response?.active ?? null",
                  "const user_codicefiscale = response?.type_specific_attributes?.user_codicefiscale ?? null",
                  "const user_userid = response?.type_specific_attributes?.user_userid ?? null",
                  "const code = response?.code ?? null",
                  "const message = response?.message ?? null",
                  "",
                  "pm.test(`account ${uid} should be present in the response body`, () => {",
                  "    pm.expect(pm.response.text().toLocaleLowerCase()).to.include(uid.toLocaleLowerCase())",
                  "})",
                  "",
                  "const returnCode = {",
                  "    \"code\": code,",
                  "    \"message\": message",
                  "}",
                  "",
                  "const getAccountDetails = {",
                  "    \"returnCode\": returnCode,",
                  "    \"account_id\": account_id,",
                  "    \"uid\": uid,",
                  "    \"active\": active,",
                  "    \"user_codicefiscale\": user_codicefiscale,",
                  "    \"user_userid\": user_userid",
                  "}",
                  "",
                  "pm.collectionVariables.set(\"account_id\", JSON.stringify(getAccountDetails.account_id, null, 2))",
                  "pm.collectionVariables.set(\"getAccountDetails\", JSON.stringify(getAccountDetails, null, 2))"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {
              "accept": true
            },
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "https://stglbiam-ms.private.nexicloud.it:443/ext-idm/ms7/account/search?uid={{uid}}&type={{INPUT_type}}&includeDeleted=false",
              "protocol": "https",
              "host": [
                "stglbiam-ms",
                "private",
                "nexicloud",
                "it"
              ],
              "port": "443",
              "path": [
                "ext-idm",
                "ms7",
                "account",
                "search"
              ],
              "query": [
                {
                  "key": "uid",
                  "value": "{{uid}}"
                },
                {
                  "key": "type",
                  "value": "{{INPUT_type}}"
                },
                {
                  "key": "includeDeleted",
                  "value": "false"
                }
              ]
            }
          },
          "response": [
            {
              "name": "Valid TYPE values",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "MT_APPLICATION",
                    "value": "{{MT_APPLICATION}}",
                    "type": "text"
                  },
                  {
                    "key": "MT_CHANNEL",
                    "value": "{{MT_CHANNEL}}",
                    "type": "text"
                  },
                  {
                    "key": "MT_USER",
                    "value": "{{MT_USER}}",
                    "type": "text"
                  },
                  {
                    "key": "MT_COMPANY",
                    "value": "{{MT_COMPANY}}",
                    "type": "text"
                  },
                  {
                    "key": "MT_COMPANY_GROUP",
                    "value": "{{MT_COMPANY_GROUP}}",
                    "type": "text"
                  },
                  {
                    "key": "MT_PARTNER",
                    "value": "{{MT_PARTNER}}",
                    "type": "text"
                  },
                  {
                    "key": "MT_REQUEST_ID",
                    "value": "{{MT_REQUEST_ID}}",
                    "type": "text"
                  },
                  {
                    "key": "MT_SESSION_ID",
                    "value": "{{MT_SESSION_ID}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "https://stglbiam-ms.private.nexicloud.it:443/ext-idm/ms7/account/search",
                  "protocol": "https",
                  "host": [
                    "stglbiam-ms",
                    "private",
                    "nexicloud",
                    "it"
                  ],
                  "port": "443",
                  "path": [
                    "ext-idm",
                    "ms7",
                    "account",
                    "search"
                  ]
                }
              },
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "body": "PORTALE_TITOLARI,PORTALE_SELFPOINTONLINE_DB,PORTALE_YAP,PORTALE_AZIENDE,PORTALE_IBK_NOMEBANCA,PORTALE_SISERVIZI,PORTALE_MAGENTO,PORTALE_PLATEA,PORTALE_MPOS"
            },
            {
              "name": "Success",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "https://stglbiam-ms.private.nexicloud.it:443/ext-idm/ms7/account/search?uid={{uid}}&type={{INPUT_type}}&includeDeleted=false",
                  "protocol": "https",
                  "host": [
                    "stglbiam-ms",
                    "private",
                    "nexicloud",
                    "it"
                  ],
                  "port": "443",
                  "path": [
                    "ext-idm",
                    "ms7",
                    "account",
                    "search"
                  ],
                  "query": [
                    {
                      "key": "uid",
                      "value": "{{uid}}"
                    },
                    {
                      "key": "type",
                      "value": "{{INPUT_type}}"
                    },
                    {
                      "key": "includeDeleted",
                      "value": "false"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "X-Application-Context",
                  "value": "api-gateway:staging:4000"
                },
                {
                  "key": "Date",
                  "value": "Tue, 20 Jun 2023 12:46:52 GMT"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json;charset=UTF-8"
                },
                {
                  "key": "Transfer-Encoding",
                  "value": "chunked"
                }
              ],
              "cookie": [],
              "body": "{\n    \"account_id\": 16373642,\n    \"uid\": \"notifiche@yopmail.com\",\n    \"change_password\": false,\n    \"identity_id\": 16390583,\n    \"type\": \"PORTALE_TITOLARI\",\n    \"active\": true,\n    \"is_shared_account\": false,\n    \"mfa_id\": [\n        \"null\"\n    ],\n    \"member_of\": null,\n    \"email\": \"notifiche@yopmail.com\",\n    \"type_specific_attributes\": {\n        \"user_codicefiscale\": \"BLLLNN85R27F205D\",\n        \"user_userid\": \"63518\"\n    }\n}"
            },
            {
              "name": "Success - 2",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "https://stglbiam-ms.private.nexicloud.it:443/ext-idm/ms7/account/search?uid={{uid}}&type={{INPUT_type}}&includeDeleted=false",
                  "protocol": "https",
                  "host": [
                    "stglbiam-ms",
                    "private",
                    "nexicloud",
                    "it"
                  ],
                  "port": "443",
                  "path": [
                    "ext-idm",
                    "ms7",
                    "account",
                    "search"
                  ],
                  "query": [
                    {
                      "key": "uid",
                      "value": "{{uid}}"
                    },
                    {
                      "key": "type",
                      "value": "{{INPUT_type}}"
                    },
                    {
                      "key": "includeDeleted",
                      "value": "false"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "X-Application-Context",
                  "value": "api-gateway:staging:4000"
                },
                {
                  "key": "Date",
                  "value": "Tue, 25 Jul 2023 09:11:12 GMT"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json;charset=UTF-8"
                },
                {
                  "key": "Transfer-Encoding",
                  "value": "chunked"
                }
              ],
              "cookie": [],
              "body": "{\n    \"account_id\": 16410076,\n    \"uid\": \"stg_pt.excel.mc03@yopmail.com\",\n    \"change_password\": false,\n    \"identity_id\": 16394325,\n    \"type\": \"PORTALE_TITOLARI\",\n    \"active\": true,\n    \"is_shared_account\": false,\n    \"mfa_id\": [\n        \"null\"\n    ],\n    \"member_of\": null,\n    \"email\": \"stg_pt.excel.mc03@yopmail.com\",\n    \"type_specific_attributes\": {\n        \"ssoca_firstlogin\": \"2022-01-04T11:52:07.001Z\",\n        \"ssoca_lastlogin\": \"2022-01-27T09:58:34.001Z\",\n        \"bank_list\": \"CREDITAGRICOLE|CHEBANCA|NEXI\",\n        \"ssocb_firstlogin\": \"2021-11-30T17:38:08.001Z\",\n        \"ssocb_lastlogin\": \"2023-01-03T15:28:03.001Z\",\n        \"user_codicefiscale\": \"MNOBNC31C41H501Y\",\n        \"user_userid\": \"68736\"\n    }\n}"
            },
            {
              "name": "404",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "https://stglbiam-ms.private.nexicloud.it:443/ext-idm/ms7/account/search?uid={{uid}}&type={{INPUT_type}}&includeDeleted=false",
                  "protocol": "https",
                  "host": [
                    "stglbiam-ms",
                    "private",
                    "nexicloud",
                    "it"
                  ],
                  "port": "443",
                  "path": [
                    "ext-idm",
                    "ms7",
                    "account",
                    "search"
                  ],
                  "query": [
                    {
                      "key": "uid",
                      "value": "{{uid}}"
                    },
                    {
                      "key": "type",
                      "value": "{{INPUT_type}}"
                    },
                    {
                      "key": "includeDeleted",
                      "value": "false"
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "X-Application-Context",
                  "value": "api-gateway:staging:4000"
                },
                {
                  "key": "Date",
                  "value": "Tue, 25 Jul 2023 08:46:29 GMT"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json;charset=UTF-8"
                },
                {
                  "key": "Transfer-Encoding",
                  "value": "chunked"
                }
              ],
              "cookie": [],
              "body": "{\n    \"code\": 404,\n    \"message\": \"ERROR: find 0 Account with Uid equals to np.centralbilling02@yopmail.com and type PORTALE_TITOLARI\"\n}"
            }
          ]
        }
      ]
    },
    {
      "name": "40 - Set Password",
      "item": [
        {
          "name": "Generate password",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "console.info(\"Generate password\")",
                  "",
                  "eval(pm.collectionVariables.get('FUN_generatePassword'))",
                  "",
                  "const inputPwd = pm.collectionVariables.get(\"INPUT_password\")",
                  "if (inputPwd === undefined || inputPwd === null || inputPwd.trim().length === 0) {",
                  "    const passwordLength = parseInt(pm.collectionVariables.get(\"INPUT_passwordLength\"), 10)",
                  "    if (Number.isNaN(passwordLength) || passwordLength <= 0) {",
                  "        console.error(\"FATAL: Invalid password length provided.\")",
                  "        postman.setNextRequest(null)",
                  "    } else {",
                  "        const password = generatePassword(passwordLength)",
                  "        pm.collectionVariables.set(\"password\", password)",
                  "    }",
                  "} else {",
                  "    console.info(`Use custom password`)",
                  "    pm.collectionVariables.set(\"password\", inputPwd)",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {
              "accept": true
            },
            "disableBodyPruning": true,
            "followRedirects": false
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://google.it",
              "protocol": "http",
              "host": [
                "google",
                "it"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Set password",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "console.info(\"Set password\")",
                  "",
                  "const account_id = pm.collectionVariables.get(\"account_id\")",
                  "",
                  "if (typeof account_id !== \"undefined\" && account_id !== null && account_id.trim() !== 0 && account_id !== \"null\") {",
                  "  console.log(\"account_id exists: \" + account_id)",
                  "} else {",
                  "  console.error(\"FATAL: account_id does not exist or is null/undefined.\")",
                  "  postman.setNextRequest(null)",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Successful POST request\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202])",
                  "})",
                  "",
                  "const response = pm.response.json()",
                  "",
                  "pm.test(\"Response should have 'value' property with value 'OK'\", function () {",
                  "    pm.expect(response.value).to.eql(\"OK\")",
                  "})",
                  "",
                  "pm.test(\"Response should have 'password' property with value ''\", function () {",
                  "    pm.expect(response.password).to.eql(\"\")",
                  "})",
                  "",
                  "const value = response?.value ?? null",
                  "const password = response?.password ?? null",
                  "const message = response?.message ?? null",
                  "",
                  "const account_id = pm.collectionVariables.get(\"account_id\")",
                  "if (response.value === \"OK\") {",
                  "    console.info(`Password set successful for account id ${account_id}: ${pm.collectionVariables.get(\"password\")}`)",
                  "    pm.collectionVariables.set(\"message\", response.value)",
                  "} else {",
                  "    pm.collectionVariables.set(\"message\", message)",
                  "    console.warn(`WARN: Password set unsuccessful for account id ${account_id}: ${message}`)",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {
              "accept": true
            }
          },
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"password\": \"{{password}}\",\n    \"send_mail\": false\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "https://stglbiam-ms.private.nexicloud.it:443/ext-idm/ms15/account/{{account_id}}/set_password",
              "protocol": "https",
              "host": [
                "stglbiam-ms",
                "private",
                "nexicloud",
                "it"
              ],
              "port": "443",
              "path": [
                "ext-idm",
                "ms15",
                "account",
                "{{account_id}}",
                "set_password"
              ]
            }
          },
          "response": [
            {
              "name": "Password found in history",
              "originalRequest": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "MT_APPLICATION",
                    "value": "{{MT_APPLICATION}}",
                    "type": "text"
                  },
                  {
                    "key": "MT_CHANNEL",
                    "value": "{{MT_CHANNEL}}",
                    "type": "text"
                  },
                  {
                    "key": "MT_USER",
                    "value": "{{MT_USER}}",
                    "type": "text"
                  },
                  {
                    "key": "MT_COMPANY",
                    "value": "{{MT_COMPANY}}",
                    "type": "text"
                  },
                  {
                    "key": "MT_COMPANY_GROUP",
                    "value": "{{MT_COMPANY_GROUP}}",
                    "type": "text"
                  },
                  {
                    "key": "MT_PARTNER",
                    "value": "{{MT_PARTNER}}",
                    "type": "text"
                  },
                  {
                    "key": "MT_REQUEST_ID",
                    "value": "{{MT_REQUEST_ID}}",
                    "type": "text"
                  },
                  {
                    "key": "MT_SESSION_ID",
                    "value": "{{MT_SESSION_ID}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"password\": \"Cartasi90\",\n    \"send_mail\": false\n}"
                },
                "url": {
                  "raw": "https://stglbiam-ms.private.nexicloud.it:443/ext-idm/ms15/account/{{accountId}}/set_password",
                  "protocol": "https",
                  "host": [
                    "stglbiam-ms",
                    "private",
                    "nexicloud",
                    "it"
                  ],
                  "port": "443",
                  "path": [
                    "ext-idm",
                    "ms15",
                    "account",
                    "{{accountId}}",
                    "set_password"
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "X-Application-Context",
                  "value": "api-gateway:staging:4000"
                },
                {
                  "key": "Date",
                  "value": "Mon, 26 Sep 2022 13:37:01 GMT"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json;charset=UTF-8"
                },
                {
                  "key": "Transfer-Encoding",
                  "value": "chunked"
                },
                {
                  "key": "Connection",
                  "value": "close"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"[LDAP: error code 53 - The provided new password was found in the password history for the user]; nested exception is javax.naming.OperationNotSupportedException: [LDAP: error code 53 - The provided new password was found in the password history for the user]; remaining name 'nexiAccountUid=16373642,ou=portale_titolari,ou=ACCOUNTS,ou=issuing'\"\n}"
            },
            {
              "name": "Password updated",
              "originalRequest": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "MT_APPLICATION",
                    "value": "{{MT_APPLICATION}}",
                    "type": "text"
                  },
                  {
                    "key": "MT_CHANNEL",
                    "value": "{{MT_CHANNEL}}",
                    "type": "text"
                  },
                  {
                    "key": "MT_USER",
                    "value": "{{MT_USER}}",
                    "type": "text"
                  },
                  {
                    "key": "MT_COMPANY",
                    "value": "{{MT_COMPANY}}",
                    "type": "text"
                  },
                  {
                    "key": "MT_COMPANY_GROUP",
                    "value": "{{MT_COMPANY_GROUP}}",
                    "type": "text"
                  },
                  {
                    "key": "MT_PARTNER",
                    "value": "{{MT_PARTNER}}",
                    "type": "text"
                  },
                  {
                    "key": "MT_REQUEST_ID",
                    "value": "{{MT_REQUEST_ID}}",
                    "type": "text"
                  },
                  {
                    "key": "MT_SESSION_ID",
                    "value": "{{MT_SESSION_ID}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"password\": \"Cartasi9001 \",\n    \"send_mail\": false\n}"
                },
                "url": {
                  "raw": "https://stglbiam-ms.private.nexicloud.it:443/ext-idm/ms15/account/{{accountId}}/set_password",
                  "protocol": "https",
                  "host": [
                    "stglbiam-ms",
                    "private",
                    "nexicloud",
                    "it"
                  ],
                  "port": "443",
                  "path": [
                    "ext-idm",
                    "ms15",
                    "account",
                    "{{accountId}}",
                    "set_password"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "X-Application-Context",
                  "value": "api-gateway:staging:4000"
                },
                {
                  "key": "Date",
                  "value": "Mon, 26 Sep 2022 13:37:44 GMT"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json;charset=UTF-8"
                },
                {
                  "key": "Transfer-Encoding",
                  "value": "chunked"
                }
              ],
              "cookie": [],
              "body": "{\n    \"value\": \"OK\",\n    \"password\": \"\"\n}"
            }
          ]
        }
      ]
    },
    {
      "name": "60 - Report",
      "item": [
        {
          "name": "Write Result report",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "console.info(\"Update Result\")",
                  "",
                  "const report = {",
                  "    accountId: JSON.parse(pm.collectionVariables.get(\"getAccountDetails\")),",
                  "    password: pm.collectionVariables.get(\"password\"),",
                  "    message: pm.collectionVariables.get(\"message\"),",
                  "}",
                  "",
                  "const result = JSON.parse(pm.environment.get(\"RESULT\"))",
                  "",
                  "result.push(report)",
                  "",
                  "pm.environment.set(\"RESULT\", JSON.stringify(result, null, 2))"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://google.it",
              "protocol": "http",
              "host": [
                "google",
                "it"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Set next request",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "console.info(\"Set next request\")",
                  "",
                  "const list = JSON.parse(pm.collectionVariables.get(\"uidList\")) || []",
                  "",
                  "if (list.length > 0)",
                  "    postman.setNextRequest(\"Safe wait\")",
                  "else {",
                  "    console.info(\"End of input data reached.\")",
                  "    postman.setNextRequest(null)",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://google.it",
              "protocol": "http",
              "host": [
                "google",
                "it"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Safe wait",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Still to test if needed to avoid error \"LDAP: error code 65\" from server",
                  "console.info(\"Please wait...\");",
                  "setTimeout(function() {",
                  "    postman.setNextRequest(\"Start loop\");",
                  "}, 3000); // 3000 milliseconds (2 seconds) delay"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {
              "accept": true
            },
            "disableBodyPruning": true,
            "followRedirects": false
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://google.it",
              "protocol": "http",
              "host": [
                "google",
                "it"
              ]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{jwtToken}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "INPUT_uidList",
      "value": "UTENZA_CHB_21@YOPMAIL.COM\niosi.debito4@yopmail.com\nstg_pt.excel.mc03@yopmail.com",
      "type": "string"
    },
    {
      "key": "INPUT_type",
      "value": "Valid values:\n\nPORTALE_TITOLARI, PORTALE_SELFPOINTONLINE_DB,PORTALE_YAP,PORTALE_AZIENDE,PORTALE_IBK_NOMEBANCA,PORTALE_SISERVIZI,PORTALE_MAGENTO,PORTALE_PLATEA,PORTALE_MPOS",
      "type": "string"
    },
    {
      "key": "INPUT_password",
      "value": "",
      "type": "string"
    },
    {
      "key": "INPUT_passwordLength",
      "value": "12",
      "type": "string"
    },
    {
      "key": "RESULT",
      "value": "[]",
      "type": "string"
    },
    {
      "key": "FUN_generatePassword",
      "value": "function generatePassword(length = 8) {\n  const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$^*_+-=|;:,.<>?\";\n  let password = \"\";\n  const charsLength = chars.length;\n\n  for (let i = 0; i < length; i++) {\n    const randomIndex = Math.floor(Math.random() * charsLength);\n    password += chars[randomIndex];\n  }\n\n  return password;\n}",
      "type": "string"
    },
    {
      "key": "FUN_extractEmails",
      "value": "function extractEmails(text) {\n    const regex = /([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9_-]+)/gi\n    return text.match(regex)\n}",
      "type": "string"
    },
    {
      "key": "jwtToken",
      "value": ""
    },
    {
      "key": "uidList",
      "value": ""
    },
    {
      "key": "uid",
      "value": ""
    },
    {
      "key": "account_id",
      "value": ""
    },
    {
      "key": "getAccountDetails",
      "value": ""
    },
    {
      "key": "password",
      "value": ""
    },
    {
      "key": "message",
      "value": ""
    }
  ]
}