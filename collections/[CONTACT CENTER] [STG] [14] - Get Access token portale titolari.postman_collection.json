{
	"info": {
		"_postman_id": "5c26d060-cc38-4a6a-8847-789dca76ae70",
		"name": "[CONTACT CENTER] [STG] [14] - Get Access token portale titolari",
		"description": "Works on STG environments\n\nIt is a reference collection that allows you to generate an Access Token to access the Portale Titolari portal.\n\nThis collection depends on a number of INPUT fields:\n\n- INPUT_username: a valid NEXI username (mandatory)\n- INPUT_password: a valid NEXI password (mandatory)\n    \n\nE.g.:\n\nINPUT_username: CO07886\n\nINPUT_password: iotv5)N$98c34r\n\nUsage:\n\n- Reset collection variables;\n- Set \"INPUT_\" prefixed parameters as your needs;\n- Run the collection.\n    \n\nThis collection produces an output in text format (the Access Token), stored into the RESULT collection variable.\n\nE.g.:\n\neyJlbmMiOiJBMTI4R0NNIiwiYWxnIjoiZGlyIn0..w-zqVJQh86exclKs.LiZVYp6Q_0Vs-1ut2H7Fwz5TMZ4K9Vd1K6R6YzrO-U9t67AQwleUGTYRHIZU1SjZZKahlWITdOYshDs3Fva0SYK8FtjWZ9yDWI-CHKxrrFc_vQLlfZXs8WkZJ-GNLr92r7vTof4ijID1KEhf4dKXuPg3rNkaz3vnJVVdBB2qn5SV1eWtdx9bXSo7g2Qupf-VxPvtUV-dz7Pu0nb7-nPW67oW97yIMe3HyJc5fLqQURDVhrf_Su6JVXO1VQ.FlLsH-jF_4QZ-GedyWoPAA",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18258051",
		"_collection_link": "https://team-nexi-alten.postman.co/workspace/Team-Workspace~d73c1392-e276-429a-830d-648e8e808912/collection/18019665-5c26d060-cc38-4a6a-8847-789dca76ae70?action=share&source=collection_link&creator=18258051"
	},
	"item": [
		{
			"name": "Get Access Token",
			"item": [
				{
					"name": "0 - Preset variables",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//console.clear()",
									"const c = pm.collectionVariables.replaceIn('retryCounter')",
									"const retry = pm.collectionVariables.get('retryCounter')",
									"pm.collectionVariables.set('retry', retry)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"followRedirects": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://google.it",
							"protocol": "http",
							"host": [
								"google",
								"it"
							]
						}
					},
					"response": []
				},
				{
					"name": "10 - Clear collection variables",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"eval(pm.collectionVariables.get('FUN_unsetAllColectionVariables'))",
									"eval(pm.collectionVariables.get('FUN_createCollectionVariableDictionary'))",
									"",
									"const variableList = [\"authorizeUrl\",\"bo_titolariSession\",\"headers\",\"redirectUri\",\"iag_cookie\",\"bo_titolariRedirUrl\",\"location\",\"lb_cookie_privati\",\"wpamm_cookie\",\"state\",\"nonce\",\"client_id\",\"authenticateUrl\",\"redirectUri\",\"cookie\",\"code\",\"accessToken\"]",
									"",
									"unsetAllColectionVariables(",
									"    createCollectionVariableDictionary(variableList)",
									")"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.info(\"Execute clear collection variables successful\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"followRedirects": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://google.it",
							"protocol": "http",
							"host": [
								"google",
								"it"
							]
						}
					},
					"response": []
				},
				{
					"name": "20 - ContactCenter",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"if(pm.response.to.have.status(200)) console.info(\"Execute ContactCenter successful\")",
									"else console.error(\"Execute ContactCenter not successful\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false,
						"disableCookies": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/114.0"
							},
							{
								"key": "Accept",
								"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8"
							},
							{
								"key": "Accept-Language",
								"value": "en-US,en;q=0.5"
							},
							{
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Upgrade-Insecure-Requests",
								"value": "1"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "document"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "navigate"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "none"
							},
							{
								"key": "Sec-Fetch-User",
								"value": "?1"
							},
							{
								"key": "Pragma",
								"value": "no-cache"
							},
							{
								"key": "Cache-Control",
								"value": "no-cache"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/contactcenter",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contactcenter"
							]
						}
					},
					"response": []
				},
				{
					"name": "30 - retrieve-functionalities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401)",
									"})",
									"",
									"eval(pm.collectionVariables.get('FUN_storeCookieIntoCollection'))",
									"eval(pm.collectionVariables.get('FUN_getCookieValue'))",
									"eval(pm.collectionVariables.get('FUN_setCookie'))",
									"eval(pm.collectionVariables.get('FUN_expiresISO8601'))",
									"",
									"const wpamm_cookieValue = getCookieValue('wpamm_cookie')",
									"const wpamm_cookie = setCookie({",
									"    name:'wpamm_cookie',",
									"    //domain:'.nexiprivate.it',",
									"    path: '/',",
									"    httpOnly: true,",
									"    value: `${wpamm_cookieValue}`",
									"});",
									"",
									"storeCookieIntoCollection('wpamm_cookie', wpamm_cookie)",
									"",
									"if(wpamm_cookie !== null && typeof wpamm_cookie !== 'undefined') console.info(\"Execute retrieve-functionalities successful\")",
									"else console.error(\"Execute retrieve-functionalities not successful\")"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false,
						"disableCookies": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/114.0"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "en-US,en;q=0.5"
							},
							{
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br"
							},
							{
								"key": "Referer",
								"value": "https://stgcardholder-bo.nexiprivate.it/contactcenter"
							},
							{
								"key": "Content-Type",
								"value": "application/json;charset=utf-8"
							},
							{
								"key": "pragma",
								"value": "no-cache"
							},
							{
								"key": "cache-control",
								"value": "no-cache"
							},
							{
								"key": "Application",
								"value": "pt"
							},
							{
								"key": "Env",
								"value": "STAGING"
							},
							{
								"key": "Client-Version",
								"value": "web"
							},
							{
								"key": "Channel",
								"value": "web"
							},
							{
								"key": "Locale",
								"value": "it"
							},
							{
								"key": "Macro-Context",
								"value": ""
							},
							{
								"key": "Micro-Context",
								"value": ""
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							}
						],
						"url": {
							"raw": "{{baseUrlSec}}/api/services/helpdesk-service/helpdesk/public/common/retrieve-functionalities",
							"host": [
								"{{baseUrlSec}}"
							],
							"path": [
								"api",
								"services",
								"helpdesk-service",
								"helpdesk",
								"public",
								"common",
								"retrieve-functionalities"
							]
						}
					},
					"response": []
				},
				{
					"name": "40 - redirected",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"if(pm.response.to.have.status(200)) console.info(\"Execute redirected successful\")",
									"else console.error(\"Execute redirected not successful\")"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const hdPortal = 'CC'",
									"",
									"const cookie = `hdPortal=${hdPortal}`",
									"",
									"pm.collectionVariables.set('cookie', cookie)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false,
						"disableCookies": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/114.0"
							},
							{
								"key": "Accept",
								"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8"
							},
							{
								"key": "Accept-Language",
								"value": "en-US,en;q=0.5"
							},
							{
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br"
							},
							{
								"key": "Referer",
								"value": "https://stgcardholder-bo.nexiprivate.it/contactcenter"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Cookie",
								"value": "{{cookie}}"
							},
							{
								"key": "Upgrade-Insecure-Requests",
								"value": "1"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "document"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "navigate"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "Pragma",
								"value": "no-cache"
							},
							{
								"key": "Cache-Control",
								"value": "no-cache"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/authenticate/redirected",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"authenticate",
								"redirected"
							]
						}
					},
					"response": []
				},
				{
					"name": "50 - generateStateAndNonce",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"eval(pm.collectionVariables.get('FUN_storeCookieIntoCollection'))",
									"eval(pm.collectionVariables.get('FUN_getCookieValue'))",
									"eval(pm.collectionVariables.get('FUN_setCookie'))",
									"",
									"const iag_cookieValue = getCookieValue('iag_cookie')",
									"const iag_cookie = setCookie({",
									"    name:'iag_cookie',",
									"    samesite:'None',",
									"    //domain:'.nexiprivate.it',",
									"    secure: true,",
									"    //path: '/',",
									"    httpOnly: true,",
									"    value: `${iag_cookieValue}`",
									"});",
									"",
									"storeCookieIntoCollection('iag_cookie', iag_cookie)",
									"",
									"const response = pm.response.json();",
									"const redirectUri = response['redirectUri']",
									"pm.collectionVariables.set(\"redirectUri\", redirectUri)",
									"console.info(`redirect: ${redirectUri}`)",
									"",
									"if(iag_cookie !== null && typeof iag_cookie !== 'undefined') console.info(\"Execute generateStateAndNonce (aka iag_cookie) successful\")",
									"else console.error(\"Execute generateStateAndNonce (aka iag_cookie) not successful\")"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const wpamm_cookie = JSON.parse(pm.collectionVariables.get('wpamm_cookie'))",
									"",
									"const cookie = `wpamm_cookie=${wpamm_cookie.value};`",
									"",
									"pm.collectionVariables.set('cookie', cookie)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false,
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/114.0"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "en-US,en;q=0.5"
							},
							{
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br"
							},
							{
								"key": "Referer",
								"value": "https://stgcardholder-bo.nexiprivate.it/authenticate/redirected"
							},
							{
								"key": "Content-Type",
								"value": "application/json;charset=utf-8"
							},
							{
								"key": "pragma",
								"value": "no-cache"
							},
							{
								"key": "cache-control",
								"value": "no-cache"
							},
							{
								"key": "Application",
								"value": "pt"
							},
							{
								"key": "Env",
								"value": "STAGING"
							},
							{
								"key": "Client-Version",
								"value": "web"
							},
							{
								"key": "Channel",
								"value": "web"
							},
							{
								"key": "Locale",
								"value": "it"
							},
							{
								"key": "Macro-Context",
								"value": ""
							},
							{
								"key": "Micro-Context",
								"value": ""
							},
							{
								"key": "Origin",
								"value": "https://stgcardholder-bo.nexiprivate.it"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"description": "e.g.: wpamm_cookie=2320346474370738512966000000000000000000000; lb_cookie_privati=041aee960aae5133a3b03fc102ffaf4e24ab7d7ca5c74a61d237d56d7f5d176f; hdPortal=CC"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{baseUrlSec}}/api/services/authentication-service/authentication/prelogin/generateStateAndNonce",
							"host": [
								"{{baseUrlSec}}"
							],
							"path": [
								"api",
								"services",
								"authentication-service",
								"authentication",
								"prelogin",
								"generateStateAndNonce"
							]
						}
					},
					"response": []
				},
				{
					"name": "60 - authorize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 302\", function () {",
									"    pm.response.to.have.status(302)",
									"})",
									"",
									"eval(pm.collectionVariables.get('FUN_storeCookieIntoCollection'))",
									"eval(pm.collectionVariables.get('FUN_getCookieValue'))",
									"eval(pm.collectionVariables.get('FUN_setCookie'))",
									"eval(pm.collectionVariables.get('FUN_expiresISO8601'))",
									"",
									"const bo_titolariRedirUrlValue = getCookieValue('bo_titolariRedirUrl')",
									"const bo_titolariRedirUrl = setCookie({",
									"    name: 'bo_titolariRedirUrl',",
									"    // domain: '.nexiprivate.it',",
									"    secure: true,",
									"    path: '/botitolari',",
									"    httpOnly: true,",
									"    value: `${bo_titolariRedirUrlValue}`",
									"});",
									"",
									"storeCookieIntoCollection('bo_titolariRedirUrl', bo_titolariRedirUrl)",
									"",
									"// get Location",
									"const headers = pm.response.headers.reduce((collection, data) => {",
									"    return collection[data.key] = data.value, collection",
									"}, {})",
									"const location = headers['Location']",
									"pm.collectionVariables.set('location', location)",
									"",
									"console.info(`location: ${location}`)",
									"",
									"if(location !== null && typeof location !== 'undefined') console.info(\"Execute authorize successful\")",
									"else console.error(\"Execute authorize not successful\")"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const wpamm_cookie = JSON.parse(pm.collectionVariables.get('wpamm_cookie'))",
									"",
									"const cookie = `wpamm_cookie=${wpamm_cookie.value};`",
									"",
									"pm.collectionVariables.set('cookie', cookie)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false,
						"disableUrlEncoding": false,
						"disableCookies": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/114.0"
							},
							{
								"key": "Accept",
								"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8"
							},
							{
								"key": "Accept-Language",
								"value": "en-US,en;q=0.5"
							},
							{
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br"
							},
							{
								"key": "Referer",
								"value": "https://stgcardholder-bo.nexiprivate.it/"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Upgrade-Insecure-Requests",
								"value": "1"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "document"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "navigate"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-site"
							},
							{
								"key": "Pragma",
								"value": "no-cache"
							},
							{
								"key": "Cache-Control",
								"value": "no-cache"
							},
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{redirectUri}}",
							"host": [
								"{{redirectUri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "70 - Get Login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const bo_titolariRedirUrl = JSON.parse(pm.collectionVariables.get('bo_titolariRedirUrl'))",
									"",
									"const cookie = `bo_titolariRedirUrl=${bo_titolariRedirUrl.value}`",
									"",
									"pm.collectionVariables.set('cookie', cookie)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.to.have.status(200)) console.info(\"Execute login successful\")",
									"else console.error(\"Execute login not successful\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false,
						"disableCookies": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/114.0"
							},
							{
								"key": "Accept",
								"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8"
							},
							{
								"key": "Accept-Language",
								"value": "en-US,en;q=0.5"
							},
							{
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br"
							},
							{
								"key": "Referer",
								"value": "https://stgcardholder-bo.nexiprivate.it/"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Cookie",
								"value": "{{cookie}}"
							},
							{
								"key": "Upgrade-Insecure-Requests",
								"value": "1"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "document"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "navigate"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-site"
							},
							{
								"key": "Pragma",
								"value": "no-cache"
							},
							{
								"key": "Cache-Control",
								"value": "no-cache"
							}
						],
						"url": {
							"raw": "{{boTitolariUrl}}/botitolari/nexiauth/openid/login",
							"host": [
								"{{boTitolariUrl}}"
							],
							"path": [
								"botitolari",
								"nexiauth",
								"openid",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "80 - Post Login (no redirect)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const bo_titolariRedirUrl = JSON.parse(pm.collectionVariables.get('bo_titolariRedirUrl'))",
									"",
									"const cookie = `bo_titolariRedirUrl=${bo_titolariRedirUrl.value}`",
									"",
									"pm.collectionVariables.set('cookie', cookie)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 302\", function () {",
									"    pm.response.to.have.status(302)",
									"})",
									"eval(pm.collectionVariables.get('FUN_storeCookieIntoCollection'))",
									"eval(pm.collectionVariables.get('FUN_getCookieValue'))",
									"eval(pm.collectionVariables.get('FUN_setCookie'))",
									"eval(pm.collectionVariables.get('FUN_expiresISO8601'))",
									"",
									"pm.test(\"Set-cookie should exists\", function () {",
									"    pm.expect(pm.response.headers.get('Set-cookie')).exist",
									"})",
									"",
									"if(typeof pm.response.headers.get('Set-cookie') === 'undefined') {",
									"    console.error(`Set-cookie header not found. Please check INPUT params.`)",
									"    postman.setNextRequest(null)",
									"} else {",
									"    const bo_titolariSessionValue = getCookieValue('bo_titolariSession')",
									"",
									"    const bo_titolariSession = setCookie({",
									"        name:'bo_titolariSession',",
									"        domain:'.nexiprivate.it',",
									"        secure: true,",
									"        path: '/botitolari',",
									"        httpOnly: true,",
									"        value: `${bo_titolariSessionValue}`",
									"    });",
									"",
									"    storeCookieIntoCollection('bo_titolariSession', bo_titolariSession)",
									"}",
									"",
									"const headers = pm.response.headers.reduce((collection, data) => {",
									"    return collection[data.key] = data.value, collection",
									"}, {})",
									"",
									"pm.test(\"Header Location should exists\", function () {",
									"    pm.expect(headers['Location']).exist",
									"});",
									"",
									"if(typeof headers['Location'] === 'undefined' || headers['Location']=== null) {",
									"    console.error(`Location header not found. Please check INPUT params.`)",
									"    postman.setNextRequest(null)",
									"} else {",
									"    pm.collectionVariables.set('headers', JSON.stringify(headers))",
									"",
									"    // get state from the Locarion url",
									"    const querystring = require('querystring')",
									"    const params = headers['Location'].split('?')",
									"",
									"    const state = querystring.parse(params[1]).state.trim()",
									"    const nonce = querystring.parse(params[1]).nonce.trim()",
									"    const clientId = querystring.parse(params[1]).client_id.trim()",
									"    pm.collectionVariables.set('authorizeUrl', headers['Location'])",
									"    pm.collectionVariables.set('state', state)",
									"    pm.collectionVariables.set('nonce', nonce)",
									"    pm.collectionVariables.set('client_id', clientId)",
									"",
									"    console.info(`authorizeUrl: ${headers['Location']}`)",
									"    console.info(`state: ${state}`)",
									"    console.info(`nonce: ${nonce}`)",
									"    console.info(`clientId: ${clientId}`)",
									"",
									"    if(nonce !== null && typeof nonce !== 'undefined') console.info(\"Execute Post Login successful\")",
									"    else console.error(\"Execute Post Login successful\")",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false,
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/114.0"
							},
							{
								"key": "Accept",
								"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8"
							},
							{
								"key": "Accept-Language",
								"value": "en-US,en;q=0.5"
							},
							{
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br"
							},
							{
								"key": "Referer",
								"value": "https://stgapigwidp-issuing.nexiprivate.it/botitolari/nexiauth/openid/login"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Origin",
								"value": "https://stgapigwidp-issuing.nexiprivate.it"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Upgrade-Insecure-Requests",
								"value": "1"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "document"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "navigate"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "Sec-Fetch-User",
								"value": "?1"
							},
							{
								"key": "Pragma",
								"value": "no-cache"
							},
							{
								"key": "Cache-Control",
								"value": "no-cache"
							},
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{INPUT_username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{INPUT_password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{boTitolariUrl}}/botitolari/nexiauth/openid/login",
							"host": [
								"{{boTitolariUrl}}"
							],
							"path": [
								"botitolari",
								"nexiauth",
								"openid",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "90 - authorize (no redirect)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const bo_titolariRedirUrl = JSON.parse(pm.collectionVariables.get('bo_titolariRedirUrl'))",
									"const bo_titolariSession = JSON.parse(pm.collectionVariables.get('bo_titolariSession'))",
									"",
									"const cookie = `bo_titolariSession=${bo_titolariSession.value}; bo_titolariRedirUrl=${bo_titolariRedirUrl.value}`",
									"",
									"pm.collectionVariables.set('cookie', cookie)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 302\", function () {",
									"    pm.response.to.have.status(302)",
									"})",
									"",
									"const headers = pm.response.headers.reduce((collection, data) => {",
									"    return collection[data.key] = data.value, collection",
									"}, {})",
									"",
									"// get state from the Locarion url",
									"const querystring = require('querystring')",
									"const params = headers['Location'].split('?')",
									"",
									"const code = querystring.parse(params[1]).code",
									"console.log(`authenticateUrl: ${headers['Location']}`)",
									"pm.collectionVariables.set('authenticateUrl', headers['Location'])",
									"console.log(`code: ${code}`)",
									"pm.collectionVariables.set('code', code)",
									"",
									"if(code !== null && typeof code !== 'undefined') console.info(\"Execute authorize successful\")",
									"else console.error(\"Execute authorize not successful\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false,
						"disableCookies": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/114.0"
							},
							{
								"key": "Accept",
								"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8"
							},
							{
								"key": "Accept-Language",
								"value": "en-US,en;q=0.5"
							},
							{
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br"
							},
							{
								"key": "Referer",
								"value": "https://stgapigwidp-issuing.nexiprivate.it/botitolari/nexiauth/openid/login"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Upgrade-Insecure-Requests",
								"value": "1"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "document"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "navigate"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "Sec-Fetch-User",
								"value": "?1"
							},
							{
								"key": "Pragma",
								"value": "no-cache"
							},
							{
								"key": "Cache-Control",
								"value": "no-cache"
							},
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authorizeUrl}}",
							"host": [
								"{{authorizeUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "100 - authenticate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"if(pm.response.to.have.status(200)) console.info(\"Execute authenticate successful\")",
									"else console.error(\"Execute authenticate not successful\")"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const hdPortal = 'CC'",
									"",
									"const cookie = `hdPortal=${hdPortal}`",
									"",
									"pm.collectionVariables.set('cookie', cookie)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false,
						"disableCookies": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/114.0"
							},
							{
								"key": "Accept",
								"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8"
							},
							{
								"key": "Accept-Language",
								"value": "en-US,en;q=0.5"
							},
							{
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br"
							},
							{
								"key": "Referer",
								"value": "https://stgapigwidp-issuing.nexiprivate.it/"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Cookie",
								"value": "{{cookie}}"
							},
							{
								"key": "Upgrade-Insecure-Requests",
								"value": "1"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "document"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "navigate"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-site"
							},
							{
								"key": "Sec-Fetch-User",
								"value": "?1"
							},
							{
								"key": "Pragma",
								"value": "no-cache"
							},
							{
								"key": "Cache-Control",
								"value": "no-cache"
							}
						],
						"url": {
							"raw": "{{authenticateUrl}}",
							"host": [
								"{{authenticateUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "110 - validateState",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const wpamm_cookie = JSON.parse(pm.collectionVariables.get('wpamm_cookie'))",
									"const iag_cookie = JSON.parse(pm.collectionVariables.get('iag_cookie'))",
									"",
									"const cookie = `iag_cookie=${iag_cookie.value}; wpamm_cookie=${wpamm_cookie.value}`",
									"",
									"pm.collectionVariables.set('cookie', cookie)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202])",
									"})",
									"",
									"// Check if the response contains the \"accessToken\" keyword",
									"pm.test(\"Access Token should be present\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"accessToken\")",
									"})",
									"",
									"const response = pm.response.json()",
									"const accessToken = response['accessToken']",
									"const count = parseInt(pm.collectionVariables.get('retry'))",
									"const message = {",
									"    \"fail\": \"Token generation failed!\",",
									"    \"success\": \"Token generated successfully!\"",
									"}",
									"",
									"if (accessToken) {",
									"    // Token is present in the response, set the collection variable and log success",
									"    pm.environment.set('RESULT', accessToken)",
									"    console.info(message['success'])",
									"} else if (count > 0) {",
									"    // Token not generated, retry with decreased attempts",
									"    const attempts = count - 1",
									"    console.error(`Token not generated. Retrying... (${attempts} more attempts)`)",
									"    postman.setNextRequest('10 - Clear collection variables')",
									"    pm.collectionVariables.set('retry', attempts)",
									"} else {",
									"    // Token not generated after all retries, log error and stop the collection run",
									"    const fail = message['fail']",
									"    console.error(`FATAL ${fail}`)",
									"    pm.environment.set('RESULT', fail)",
									"    postman.setNextRequest(null)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false,
						"disableCookies": true,
						"disableUrlEncoding": false,
						"tlsPreferServerCiphers": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/114.0"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "en-US,en;q=0.5"
							},
							{
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br"
							},
							{
								"key": "Referer",
								"value": "https://stgcardholder-bo.nexiprivate.it/authenticate?code=72f44c77-95d5-4441-9bd8-72e5e6b0cf01&state=JCe9%2BASAxcZZ8CohXUfHX4%2FSsFWoyH0RQPY18J42ts04pwka7LZzCSmIItmcgUE%2F"
							},
							{
								"key": "Content-Type",
								"value": "application/json;charset=utf-8"
							},
							{
								"key": "pragma",
								"value": "no-cache"
							},
							{
								"key": "cache-control",
								"value": "no-cache"
							},
							{
								"key": "Application",
								"value": "pt"
							},
							{
								"key": "Env",
								"value": "STAGING"
							},
							{
								"key": "Client-Version",
								"value": "web"
							},
							{
								"key": "Channel",
								"value": "web"
							},
							{
								"key": "Locale",
								"value": "it"
							},
							{
								"key": "Macro-Context",
								"value": ""
							},
							{
								"key": "Micro-Context",
								"value": ""
							},
							{
								"key": "Origin",
								"value": "https://stgcardholder-bo.nexiprivate.it"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Cookie",
								"value": "{{cookie}}"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": \"{{code}}\",\n    \"state\": \"{{state}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrlSec}}/api/services/authentication-service/authentication/prelogin/validateState",
							"host": [
								"{{baseUrlSec}}"
							],
							"path": [
								"api",
								"services",
								"authentication-service",
								"authentication",
								"prelogin",
								"validateState"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/114.0"
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Accept-Language",
										"value": "en-US,en;q=0.5"
									},
									{
										"key": "Accept-Encoding",
										"value": "gzip, deflate, br"
									},
									{
										"key": "Referer",
										"value": "https://stgcardholder-bo.nexiprivate.it/authenticate?code=72f44c77-95d5-4441-9bd8-72e5e6b0cf01&state=JCe9%2BASAxcZZ8CohXUfHX4%2FSsFWoyH0RQPY18J42ts04pwka7LZzCSmIItmcgUE%2F"
									},
									{
										"key": "Content-Type",
										"value": "application/json;charset=utf-8"
									},
									{
										"key": "pragma",
										"value": "no-cache"
									},
									{
										"key": "cache-control",
										"value": "no-cache"
									},
									{
										"key": "Application",
										"value": "pt"
									},
									{
										"key": "Env",
										"value": "STAGING"
									},
									{
										"key": "Client-Version",
										"value": "web"
									},
									{
										"key": "Channel",
										"value": "web"
									},
									{
										"key": "Locale",
										"value": "it"
									},
									{
										"key": "Macro-Context",
										"value": ""
									},
									{
										"key": "Micro-Context",
										"value": ""
									},
									{
										"key": "Origin",
										"value": "https://stgcardholder-bo.nexiprivate.it"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Cookie",
										"value": "{{cookie}}"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{code}}\",\n    \"state\": \"{{state}}\"\n}"
								},
								"url": {
									"raw": "https://stgcardholder-bo.nexiprivate.it/api/services/authentication-service/authentication/prelogin/validateState",
									"protocol": "https",
									"host": [
										"stgcardholder-bo",
										"nexiprivate",
										"it"
									],
									"path": [
										"api",
										"services",
										"authentication-service",
										"authentication",
										"prelogin",
										"validateState"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Application-Context",
									"value": "zuul-gateway:staging:4000"
								},
								{
									"key": "Date",
									"value": "Tue, 04 Jul 2023 14:39:28 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json;charset=UTF-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"cardContextRefreshRequired\": false,\n    \"skipContextRefresh\": false,\n    \"client\": {\n        \"application\": \"pt\",\n        \"channel\": \"web\",\n        \"locale\": \"it\",\n        \"version\": \"web\"\n    },\n    \"commercialCardContextRefreshRequired\": false,\n    \"commercialSkipContextRefresh\": false,\n    \"functionalities\": [\n        \"BACK_OFFICE\",\n        \"CONTACT_CENTER\"\n    ],\n    \"authorizationsMap\": {\n        \"BACK_OFFICE\": \"W\",\n        \"CONTACT_CENTER\": \"W\"\n    },\n    \"accessToken\": \"eyJlbmMiOiJBMTI4R0NNIiwiYWxnIjoiZGlyIn0.._BuhsuqAPocdl0hg.26Hl7UlTqTIh-Dlr40I1FmMtyH6B7I_65jQAik3obL9vuDDBIqPYwKvZ5zwPL4h7lHn-6nKuBf1C6ilbsU9vvUE1g5dDiz1j6X3V0hO8vn2XhyZRjTR1CnVcbxV0iT3pFHozI1z1yGP3p2ku7GmCYDHdvrJjDV090JQAWPUxsCxB6m6JwPBUTcsbIJZpQ7BPoDGFVKyM4X4nfKl4zFk40u8MnQ_MH86zqoTxh5YIPTNxNkr7AHbR3CgbHw._55pk_-m61NTQdP-qBdGZw\"\n}"
						},
						{
							"name": "500",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/114.0"
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Accept-Language",
										"value": "en-US,en;q=0.5"
									},
									{
										"key": "Accept-Encoding",
										"value": "gzip, deflate, br"
									},
									{
										"key": "Referer",
										"value": "https://stgcardholder-bo.nexiprivate.it/authenticate?code=72f44c77-95d5-4441-9bd8-72e5e6b0cf01&state=JCe9%2BASAxcZZ8CohXUfHX4%2FSsFWoyH0RQPY18J42ts04pwka7LZzCSmIItmcgUE%2F"
									},
									{
										"key": "Content-Type",
										"value": "application/json;charset=utf-8"
									},
									{
										"key": "pragma",
										"value": "no-cache"
									},
									{
										"key": "cache-control",
										"value": "no-cache"
									},
									{
										"key": "Application",
										"value": "pt"
									},
									{
										"key": "Env",
										"value": "STAGING"
									},
									{
										"key": "Client-Version",
										"value": "web"
									},
									{
										"key": "Channel",
										"value": "web"
									},
									{
										"key": "Locale",
										"value": "it"
									},
									{
										"key": "Macro-Context",
										"value": ""
									},
									{
										"key": "Micro-Context",
										"value": ""
									},
									{
										"key": "Origin",
										"value": "https://stgcardholder-bo.nexiprivate.it"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Cookie",
										"value": "{{cookie}}"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{code}}\",\n    \"state\": \"{{state}}\"\n}"
								},
								"url": {
									"raw": "https://stgcardholder-bo.nexiprivate.it/api/services/authentication-service/authentication/prelogin/validateState",
									"protocol": "https",
									"host": [
										"stgcardholder-bo",
										"nexiprivate",
										"it"
									],
									"path": [
										"api",
										"services",
										"authentication-service",
										"authentication",
										"prelogin",
										"validateState"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Application-Context",
									"value": "zuul-gateway:staging:4000"
								},
								{
									"key": "Date",
									"value": "Tue, 04 Jul 2023 14:52:33 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json;charset=UTF-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"cardContextRefreshRequired\": false,\n    \"skipContextRefresh\": false,\n    \"commercialCardContextRefreshRequired\": false,\n    \"commercialSkipContextRefresh\": false,\n    \"mainError\": {\n        \"code\": \"1.pt.web.it\",\n        \"message\": \"Dati inviati non corretti\",\n        \"errorType\": \"BLOCKER\",\n        \"popupType\": \"UNAVAILABLE\"\n    },\n    \"errors\": []\n}"
						}
					]
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "INPUT_username",
			"value": "CO07886",
			"type": "string"
		},
		{
			"key": "INPUT_password",
			"value": "",
			"type": "string"
		},
		{
			"key": "RESULT",
			"value": ""
		},
		{
			"key": "FUN_unsetAllColectionVariables",
			"value": "function unsetAllColectionVariables(variableList) {\n    variableList.map(variable => variable.key).forEach(name => pm.collectionVariables.unset(name))\n}",
			"type": "string"
		},
		{
			"key": "FUN_setCookie",
			"value": "// destructuring to assign parameters \nfunction setCookie({name: name, expires: expires = '', samesite: samesite = '', secure: secure = false, maxAge: maxAge = '', domain: domain, path: path, httpOnly: httpOnly = false, value: value} = {}) {\n    const Cookie = require('postman-collection').Cookie\n    \n    const argList = {\n        'name': name,\n        'expires': expires,\n        'samesite': samesite,\n        'secure': secure,\n        'maxAge': maxAge,\n        'domain': domain,\n        'path': path,\n        'httpOnly': httpOnly,\n        'value': value\n    }\n    const cookieParamList = {}\n    _.map(argList, (value, key) => { \n        if(value && typeof value !== \"undefined\") {\n            cookieParamList[key] = value\n        }\n    })\n    return new Cookie(cookieParamList)\n}",
			"type": "string"
		},
		{
			"key": "FUN_iso8601ToUnixTimestamp",
			"value": "function iso8601ToUnixTimestamp(isoDate) {\n  var date = new Date(isoDate);\n  var unixTimestamp = date.getTime() / 1000; // Divide by 1000 to convert milliseconds to seconds\n  return unixTimestamp;\n}",
			"type": "string"
		},
		{
			"key": "FUN_expiresISO8601",
			"value": "function expiresISO8601() {\n    // Crea una data corrente\n    var dataCorrente = new Date();\n\n    // Ottieni i componenti della data\n    var anno = dataCorrente.getFullYear();\n    var mese = String(dataCorrente.getMonth() + 1).padStart(2, '0'); // Aggiungi 1 al mese poiché i mesi sono indicizzati da zero\n    var giorno = String(dataCorrente.getDate()).padStart(2, '0');\n    var ore = String(dataCorrente.getHours()).padStart(2, '0');\n    var minuti = String(dataCorrente.getMinutes()).padStart(2, '0');\n    var secondi = String(dataCorrente.getSeconds()).padStart(2, '0');\n    var millisecondi = String(dataCorrente.getMilliseconds()).padStart(3, '0');\n\n    // Crea la stringa nel formato ISO 8601\n    var dataISO8601 = `${anno}-${mese}-${giorno}T${ore}:${minuti}:${secondi}.${millisecondi}Z`;\n\n    return dataISO8601;  // Esempio di output: \"2023-06-30T14:50:25.000Z\"\n}",
			"type": "string"
		},
		{
			"key": "FUN_getCookieValue",
			"value": "/**\n * Get the value of the desider cookie, given the cookie name\n * @param cookieName {string} desired cookie name\n * @return value of the desired cookie, if found\n */\nfunction getCookieValue(cookieName) {\n    const desiredCookie = cookieName\n\n    const getHeaderList = (headerName) => \n        pm.response.headers\n        .filter(header=>header.key.toLowerCase() === headerName.toLowerCase())\n        .map(f=>f.value)\n\n    // Map each key-value pair into an object\n    const headerList = getHeaderList('set-cookie')\n    const cookieList = headerList\n        .map( header => header.replace(/\\s/g, '').split(\";\"))\n        .map(pairs => pairs.reduce( (result, pair) => {\n        const keyValue = pair.split(\"=\")\n        const key = keyValue[0].trim()\n        const value = keyValue[1]\n        result[key] = value\n        return result\n    }, {}))\n\n    const cookieFound = cookieList.find( dictionary => {\n        return dictionary.hasOwnProperty(desiredCookie)\n    })\n\n    return cookieFound[desiredCookie]\n}",
			"type": "string"
		},
		{
			"key": "FUN_storeCookieIntoCollection",
			"value": "function storeCookieIntoCollection(name, cookie) {\n    pm.collectionVariables.set(name, JSON.stringify(cookie, null, 2))\n}",
			"type": "string"
		},
		{
			"key": "FUN_createCollectionVariableDictionary",
			"value": "/**\n * varList: array of strings\n * Returns array in collectionVariable JSON format\n */\nfunction createCollectionVariableDictionary(varList) {\n    const res = _.chain(variableList)\n                .map((v, i) => {\n                    const template = `{\n                        \"key\": \"#name#\",\n                        \"value\": \"\",\n                        \"enabled\": true,\n                        \"sessionValue\": \"\",\n                        \"sessionIndex\": #index#\n                    }`\n\n                    return template.replace('#name#', v)\n                                .replace('#index#', i)\n                })\n                .toArray()\n                .join(',')\n    return JSON.parse(`[${res}]`)\n}",
			"type": "string"
		},
		{
			"key": "MT_APPLICATION",
			"value": "{{MT_APPLICATION_ENV}}"
		},
		{
			"key": "MT_CHANNEL",
			"value": "{{MT_CHANNEL_ENV}}"
		},
		{
			"key": "MT_COMPANY",
			"value": "{{MT_COMPANY_ENV}}"
		},
		{
			"key": "MT_COMPANY_GROUP",
			"value": "{{MT_COMPANY_GROUP_ENV}}"
		},
		{
			"key": "MT_PARTNER",
			"value": "{{MT_PARTNER_ENV}}"
		},
		{
			"key": "MT_REQUEST_ID",
			"value": "{{MT_REQUEST_ID_ENV}}"
		},
		{
			"key": "MT_SESSION_ID",
			"value": "{{MT_SESSION_ID_ENV}}"
		},
		{
			"key": "baseUrl",
			"value": "{{contactCenterServer}}"
		},
		{
			"key": "boTitolariUrl",
			"value": "{{boTitolariServer}}",
			"type": "string"
		},
		{
			"key": "baseUrlSec",
			"value": "{{contactCenterServerSec}}",
			"type": "string"
		},
		{
			"key": "retryCounter",
			"value": "10",
			"type": "string"
		},
		{
			"key": "retry",
			"value": ""
		},
		{
			"key": "wpamm_cookie",
			"value": ""
		},
		{
			"key": "cookie",
			"value": ""
		},
		{
			"key": "iag_cookie",
			"value": ""
		},
		{
			"key": "redirectUri",
			"value": ""
		}
	]
}